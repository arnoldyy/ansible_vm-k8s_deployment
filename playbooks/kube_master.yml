---
- name: Initialize Kubernetes control plane
  hosts: kube_control_plane
  become: yes
  tasks:
    - name: Create kubelet directory
      file:
        path: /var/lib/kubelet
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Ensure kubelet is running
      systemd:
        name: kubelet
        state: started
        enabled: yes
        
    - name: Configure containerd CRI endpoint
      copy:
        content: |
          [plugins."io.containerd.grpc.v1.cri"]
            sandbox_image = "registry.k8s.io/pause:3.9"
            systemd_cgroup = true
        dest: /etc/containerd/config.toml
        mode: '0644'
      notify: Restart containerd

    - name: Configure kubelet CRI endpoint
      copy:
        content: |
          KUBELET_KUBEADM_ARGS="--container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --cgroup-driver=systemd"
        dest: /var/lib/kubelet/kubeadm-flags.env
        mode: '0644'
      notify: Restart kubelet

    - name: Open firewall ports for Kubernetes
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 6443
        - 10250

    - name: Open firewall ports for Flannel
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: udp
      loop:
        - 8472
        - 51820

    - name: Pull Kubernetes images
      command: kubeadm config images pull
      register: image_pull
      retries: 3
      delay: 5
      until: image_pull is success

    - name: Initialize cluster
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_default_ipv4.address }} --v=5
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init

    - name: Fail if cluster initialization failed
      fail:
        msg: "Cluster initialization failed: {{ kubeadm_init.stderr }}"
      when: kubeadm_init.rc != 0

    - name: Create .kube directory
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy admin.conf to user kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        owner: ubuntu
        group: ubuntu
        mode: '0644'
        remote_src: yes

    - name: Wait for API server to be ready
      command: kubectl get nodes --kubeconfig=/home/ubuntu/.kube/config
      register: api_check
      until: api_check is success
      retries: 15
      delay: 10
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config
      when: kubeadm_init is success

    - name: Install Flannel network
      command: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config
      register: flannel_install
      until: flannel_install is success
      retries: 5
      delay: 10
      when: kubeadm_init is success

    - name: Wait for Flannel pods to be ready
      command: kubectl get pods -n kube-flannel --field-selector=status.phase=Running
      register: flannel_check
      until: flannel_check.rc == 0
      retries: 10
      delay: 10
      environment:
        KUBECONFIG: /home/ubuntu/.kube/config
      when: flannel_install is success

    - name: Save join command
      command: kubeadm token create --print-join-command
      register: join_command
      when: kubeadm_init is success

    # Both tasks below depend on successful join command creation.
    # The 'when: join_command is success' condition ensures they only run if the join command was generated.

    - name: Copy join command to control plane
      copy:
        content: "{{ join_command.stdout }}"
        dest: /tmp/kubernetes_join_command
        mode: '0644'
        remote_src: yes
      when: join_command is success

    - name: Fetch join command to Ansible control node
      fetch:
        src: /tmp/kubernetes_join_command
        dest: /tmp/kubernetes_join_command
        flat: yes
      when: join_command is success
  handlers:
    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted